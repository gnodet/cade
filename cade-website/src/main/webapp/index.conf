h1. Cade

h2. What is Cade?

Cade stand for "Config ADmin Extender" and is an extension to the OSGi 
Configuration Admin extension to ease the creation of managed services
and their configuration.

This code is based on an idea from Peter Kriens.

h2. Example

For example, this is how a configuration for a simple tcp based server
would look like:

{pygmentize:java}
package com.acme.server;

public interface ServerConf {
    String host();
    int port();
}
{pygmentize}

The PID of the configuration defaults to the interface name, which would be
{{com.acme.server.ServerConf}} in the above example.
This interface can be used to retrieve two values from the configuration
named {{host}} and {{port}}.

An OSGi service that needs to receive this configuration simply needs to
implement the {{Configurable<ServerConf>}} interface:

{pygmentize:java}
package com.acme.server;

import org.fusesource.cade.Configurable;

public class Server implements Configurable<ServerConf> {
    public void setup(ServerConf conf) {
        // use the configuration
    }
    public void deleted() {
        // config has been remove
    }
}
{pygmentize}

h2. Inheritance

A given configuration interface can also inherit another interface.
For example:

{pygmentize:java}
package com.acme.server;

import org.fusesource.cade.Meta.Separated;

public interface ExtendedServerConf extends ServerConf {
	@Separated
	List<String> blacklist();
}
{pygmentize}

This would merge the configurations with the PIDs {{com.acme.server.ServerConf}} and 
{{com.acme.server.ExtendedServerConf}}.

h2. Customization

The {{org.fusesource.cade.Meta}} interface defines a few annotations that can be used
to customize the way the PID and properties are used:

* {{@PID}} allows binding an interface to a specific PID
* {{@Key}} allows binding a method to a specific property name
* {{@Default}} provides a default value for a given property
* {{@Separated}} can be used to define a list of values

For more details, see the API JavaDocs.

